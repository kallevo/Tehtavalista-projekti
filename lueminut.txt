Selostetut koodit löytyvät tekstin alta.

1. Taulukko 1:een post kutsu. Tämän avulla päivitetään tai lisätään tietoja tietokantaan. Sql1 suoritetaan lisättäessä täysin uusi muistiinpano taulukkoon,
   sql2 silloin kun muokataaan muistiinpanoa, sql3 silloin kun merkataan jokin muistiinpano tehdyksi ja sql4 silloin kun muutetaan kategoriaa. Tiedot annetaan
   tälle json stringinä ja sen jälkeen sql-kysely suoritetaan näiden stringien avulla.

app.post("/posttaulukko1", urlencodedParser, function (req, res) {
    let sql1, sql2, sql3, sql4;
    console.log("body: %j", req.body);
    let jsonObj = req.body;
    console.log("Otsikko: " + jsonObj.otsikko);

    sql1 = "INSERT INTO taulukko1(id, rivi, kategoria, otsikko, teksti)"
        + " VALUES ( ?, ?, ?, ?, ?)";

    sql2 = "UPDATE taulukko1"
        + " SET otsikko=?, teksti=?"
        + " WHERE id=? AND rivi=?";

    sql3 = "UPDATE taulukko1"
        + " SET valmis=?"
        + " WHERE id=? AND rivi=?";

    sql4 = "UPDATE taulukko1"
        + " SET kategoria=?"
        + " WHERE rivi=?";

    let responseString = JSON.stringify(jsonObj)
    res.send("POST succesful: "+ responseString);

    (async () => { // IIFE (Immediately Invoked Function Expression)
        try {
            if (jsonObj.edit === "false") {
                const result = await query(sql1, [jsonObj.id, jsonObj.rivi, jsonObj.kategoria, jsonObj.otsikko, jsonObj.teksti]);
            } else if (jsonObj.edit === "true") {
                const result = await query(sql2, [jsonObj.otsikko, jsonObj.teksti, jsonObj.id , jsonObj.rivi]);
            } else if (jsonObj.valmis === "true") {
                const result = await query(sql3, [jsonObj.valmis, jsonObj.id , jsonObj.rivi]);
            } else if (jsonObj.kategoria !== undefined) {
                const result = await query(sql4, [jsonObj.kategoria, jsonObj.rivi]);
            }
        }
        catch (err) {
            console.log("Database error!"+ err);
        }
    })()
});

2. Tätä post kutsua käytetään muistiinpanojen siirtämisessä arkistoon, jolloin muistiinpano poistetaan taulukko1:stä ja siirretään arkistoon.
   Sql1 ja sql2 käytetään silloin kun poistetaan vain yksi muistiinpano etusivulta. Sql3 ja sql4 käyetään silloin kun monta muistiinpanoa poistetaan.
   Tiedot annetaan tälle json stringinä ja sen jälkeen sql-kysely suoritetaan näiden stringien avulla.

app.post("/postarkisto", urlencodedParser, function (req, res) {
    let sql1, sql2, sql3, sql4;
    console.log("body: %j", req.body);
    let jsonObj = req.body;
    console.log("Poiston id: " + jsonObj.id);
    console.log("Poiston rivi: " + jsonObj.rivi);

    sql1 = "INSERT INTO Arkisto"
        + " SELECT * FROM taulukko1"
        + " WHERE rivi=? AND id=?"

    sql2 = "DELETE FROM taulukko1"
        + " WHERE rivi=? AND id=?"

    sql3 = "INSERT INTO Arkisto"
        + " SELECT * FROM taulukko1"
        + " WHERE rivi=?"

    sql4 = "DELETE FROM taulukko1"
        + " WHERE rivi=?"

    let responseString = JSON.stringify(jsonObj)
    res.send("POST succesful: "+ responseString);

    (async () => { // IIFE (Immediately Invoked Function Expression)
        try {
            if (jsonObj.montapoistoa === "false") {
                const result1 = await query(sql1, [jsonObj.rivi, jsonObj.id]);
                const result2 = await query(sql2, [jsonObj.rivi, jsonObj.id]);
            } else if (jsonObj.montapoistoa === "true") {
                const result3 = await query(sql3, [jsonObj.rivi]);
                const result4 = await query(sql4, [jsonObj.rivi]);
            }
        }
        catch (err) {
            console.log("Database error!"+ err);
        }
    })()
});

3. Get pyyntö, jolla saadaan tietokannasta jokaisen muistiinpanon tiedot. Tätä käytetään loadDb-funktiossa, jossa kaikki taulukko1:n muistiinpanot viedään sivulle,
   kun sivu avataan. Tiedot annetaan loadDb-funktiolle json string muodossa.

app.get("/gettaulukko1", function (req, res) {
    let string;

    let sql = "SELECT *"
        + " FROM taulukko1"
        + " ORDER BY id";

    (async () => { // IIFE (Immediately Invoked Function Expression)
        try {
            const rows = await query(sql);
            string = JSON.stringify(rows);
            let result = '{"numOfRows":' + rows.length + ', "rows":' + string + '}';
            console.log("Rivejä: " + rows.length);
            console.log(rows);
            res.send(result);
        }
        catch (err) {
            console.log("Database error!"+ err);
        }
    })()
});

4. Tätä get kutsua käytetään arkiston muistiinpanojen lataamiseen, kun sivu avataan. Tiedot annetaan kutsujalle json string muodossa.

app.get("/getarkisto", function (req, res) {
    let string;

    let sql = "SELECT *"
        + " FROM Arkisto"
        + " ORDER BY database_id";

    (async () => { // IIFE (Immediately Invoked Function Expression)
        try {
            const rows = await query(sql);
            string = JSON.stringify(rows);
            let result = '{"numOfRows":' + rows.length + ', "rows":' + string + '}';
            console.log("Rivejä: " + rows.length);
            console.log(rows);
            res.send(result);
        }
        catch (err) {
            console.log("Database error!"+ err);
        }
    })()
});